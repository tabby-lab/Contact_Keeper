CREATE GIT REPO
-.gitignore with node_modules/ in file 
-git init
-git add .
-git commit -m "test"
-git push

BACK-END***********************************
npm init -y creates package json
npm run server 

express-web frame work/routing
bcryptjs-hashing passwords
jsonwebtoken-authenticate token
config-global variables
express validator- to validate body data
mongoose-add,read, delete data and create models

Dev Dependencies
npm i -D 
nodemon-keep watching server
concurrenty-run back and front end at the same time

adding scripts
"start":'node server.js'
"server":"nodemon server.js"

SERVER
1. build simple server(entry point to backend)
2. npm run server 
3. needs a get route with req and res to send data

ROUTES
1. create folder called routes with contacts,users,auth files
contacts-crud func
users-register route
auth-login and auth and route to check logged in users
2. bring into server.js using app.use for the routes

3.USER
- bring in express so i can use router
-bring in router
-add endpoints
-export

4.AUTH 
-bring in router
-same as user (copy paste)
-get request instead
-private access
-also needs get request for public access

5.CONTACT 
-CRUD so we need 4 routes
-copy from user and paste
-get request which gets users contaacts all of these are private
-post request to add contacts(copy paste change to post)
-put request which involves id update contacts
-delete same thing with id

USE POSTMAN TO CHECK ALL 

6.CONNECT MONGODB TO APP 
-create config folder in main root
-inside create default.json (for global variables)
-mongoURI in VS CODE and add from mongodb -> 
connect ->connect to app -> copy and paste into VS -> add password
-inside config folder add db.js (uses mongoose to connect
to database)
-bring in mongoose and config
-const db to get mongoURI 
-create a function connectDB 
-gives a promise so .then in console log 
-then .catch to catch error
-could use aysnc await as well instead of then and catch
-module exports connect DB
-bring in connect DB IN SERVER and call it
-should say mongoDB connected in terminal(:

7.USER MODEL & VALIDATION
-create a models folder and put User.js and files
-USER.JS make a schema with name,email,password,and date
-bring User into users.js route 
-to use body we need to create a middleware in server.js 
-POSTMAN check with POST request to port 500/api/users->
headers with content type and value of application/json->
go to body with raw format->type in {} with json data of name and email
-need to bring in express validator to users
-then check name email password
-set error
-then check on postman with one of them see if error wokrs

8.HASH PASSWORD 
-in users.js we need to destructor name email and password
from req.body with a try catch dealing with bcrypt and database
-(try)find a user based on feild(email)
-(if) user exist then return response alredy exist
-user=new user if not
-salt to encrpyt password
-user with password = hash with plain text password and salt
-save
-bring in bcrypt at the top of code
-res.send to test it 
-(catch) error and console error
-TEST ON POSTMAN
-MAKE SURE USER WAS SAVED IN COLLECTIONS IN MONGODB make sure 
it has id and crypt pw etc 

9.CREATE & RESPOND WITH JSON WEB TOKEN 
-JWT website
-payload=data
-in users.js bring in JWT
-after save () create payload with user id 
-to generate the token we have to sign with payload and secret
-we dont want the secret to show so we put that in default.json 
-to use the secret bring in config in users.js
-TEST IN POSTMAN see if token is there
-take token test in JWT website to get id 

10.AUTHENTICATE ROUTE
-routes/auth.js
-bringing in a lot of things from users.js
-start with authenticating user->check email->check password
-add error checking make aysnc 
-take email and password out of body (destructor)
-try/catch with await 
-use const isMatch to check password
-if does match use payload and sign from users and paste in auth 
-TEST IN POSTMAN:new collection contact keeper api and file users and auth 
save as register user.
-post request /auth in postman 
-header content type and application back to body raw and test email and password
-save login user on postman 

11.MIDDLEWARE AND PROTECTING ROUTES 
-create a middleware folder and file called auth.js
-middleware is a func that has access to req and res cycle/obj
-check to see if there is a token in header
-bring in jwt and config
-module exports have to call next after req and res 
-get token from header
-check if not token
-try catch / verify

-test in auth.js 
-ANYTIME A ROUTE NEEDS TO BE PROTECTED bring in middleware
-bring in auth ../middleware/auth
-pass in auth as a second param 
-try catch
-in POSTMAN check: key is x-auth-token and value is the sercet token 
-data will return 
-save as get logged in user postman 
-should have 3 (register user,login user, and now get logged in user)

12.CONTACT MODEL AND CONTACT ROUTES
-copy from user model and put in contact/change stuff
-routes->contact.js ->bring in validation,middleware,and contact model
-2nd param of auth to make it protected for the router.get
-pull from database so need a try catch bc mongoose
-POSTMAN TEST make get req to api/contacts with header x-auth-token with the token
-should show as empty array bc we dont have any contacts yet
-POSTMAN TEST ALL

13.CONTACT UPDATE AND delete
-copy paste update and change some things
-test on postman 

FRONT END********************************************
1.SET UP AND CONCURRENTLY
-npx create-react-app client
-go to package-json in back end
-add client(prefix in client),clientinstall,dev is going to run both
-add proxy in client json package 
-npm run dev

2.CLEANUP/NAVBAR & ROUTER SETUP
-delete gitignore and readme
-get rid of git repo by cd client then run rm -rf .git 
-then cd .. back to root
-added all the things in gitignore files(not neccessary though)
-cd into client and npm i and install some dependencies (axios(hdp client),react-router-dom, uuid, react-transition-group)
-cd .. back to root and start dev
-css file from udemy replaced
-get rid of logo.svg,service worker, index css, 
app.test,cleanup in index.js,app.js rid logo,change 
to arrow func in app as well as everything in div, index html rid comments and change title
-fontawesome cdn in head 
NAVBAR
-src folder called components
-in components folder called layout
-file in layout called Navbar.js
-rafc (functional component)
-two props called title and icon
-bring in proptypes
-navbar.proptypes with string is req etc
-in div pull out icon and title in main div 
-bring into app.js 
ROUTER
-import router-dom in app.js
-everything in return is surronded by router
-bring in fragment instead div
-under navbar we need a container for everything
-switch in the container 
-routes with exact paths/ home and about pages
-bring in home and about pages in app.js
-go into components and create folder called pages w files home.js and about.js
-home.js racf/ in div put h1 home
-about.js racf/ in div put h1 about etc
-navbar bring in link from react router dom
-want to use link not aherf
-link to home and about
 
3.CONTACTS CONTEXT AND GLOBAL STATE 
-folder in src called CONTEXT
-types.js file in that folder  (variables to use to deceide what we are doing in our reducer)
-insie context we need a folder called contact with 3 files context,state,and reducer
-context is simple/just to initialize 
-in ContactState file we need to import react with usereducer so we can have access to state and dispatch so we can dispatch from reducer,
import uuid , contactcontext, contactreducer, and types (addcontact,delet etc)
-func for contact state to take in props
-within that have intitial state hard code some contacts
-pull out this state and dispatch by using useReducer hook
-then we need all the actions we are going to add
-in types.js export all action func
-return provider so we can wrap our whole app with this context
-go to app.js and bring in contactstate then wrap app in provider 
-now we have access to state

4.CONTACTS & CONTACTITEM COMPONENTS 
-inside components folder contacts and file called Contacts.js and Contactitem.js
-WHAT WE WANT TO DO pull in contacts from the state into the contacts component then map thorugh them create a list and output a contact item for one
-Start in Contacts.js rafc and bring in contactcontext and use fragment  useContext hook from react 
-initialize contactContext 
-destructor from contactContext {contacts}
-use fragment
-map through contact array output name
-go to home.js and bring in Contacts bc thats where we want to display
-two column grids
-ContactForm and Contacts components
*that part is confusing*








SIDE NOTES
HDP methods:
-post-submitting to server
-get-fetch data from server
-delete-delete
-put-update from server
-Errors 401,500,400,404

backend express api that serves json and takes tokens
